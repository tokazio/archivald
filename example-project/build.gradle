plugins {
    alias libs.plugins.kotlin.jvm
    alias libs.plugins.ksp
}

group = 'fr.tokazio.konsistksp'
version = 'undefined'

jar {
    enabled = false
}

repositories {
    mavenCentral()
}

// To compile src/rules independently of the main compilation
// compilation here is not mandatory but it allow to see compilation errors
// before the konsist ksp dynamic compilation step
sourceSets.test.java.srcDirs += ['src/rules']

dependencies {
    ksp "fr.tokazio.konsistksp:konsistksp-annotations:${libs.versions.me.version.get()}"
    // Validate the @ArchitectureRule
    ksp "fr.tokazio.konsistksp:konsistksp-processor:${libs.versions.me.version.get()}"


    implementation 'org.springframework:spring-web:7.0.0-M9'
    testImplementation 'org.springframework:spring-web:7.0.0-M9'
    implementation 'org.springframework.boot:spring-boot-validation:4.0.0-M3'
    testImplementation 'org.springframework.boot:spring-boot-validation:4.0.0-M3'

    // As a testImplementation to use the src/rules
    testImplementation "fr.tokazio.konsistksp:konsistksp-annotations:${libs.versions.me.version.get()}"
    // Use standard-rules
    testImplementation "fr.tokazio.konsistksp:konsistksp-standard-rules:${libs.versions.me.version.get()}"

    testImplementation "io.kotest:kotest-runner-junit5-jvm:${libs.versions.kotest.version.get()}"
}

kotlin {
    jvmToolchain(libs.versions.jvm.version.get().toInteger())
}

ksp {
    arg("konsistKspProjectBase", projectDir.absolutePath)
    arg("konsistKspClasspath", configurations.testCompileClasspath.asPath) // testCompileClasspath to use src/rules
    arg("konsistKspDebug", "true")
    arg("konsistKspFailFast", "false") // true to fail the build at the first rule failure
    arg("konsistKspIgnoreFailures", "false") // true to not fail the build
}

test {
    useJUnitPlatform()
}